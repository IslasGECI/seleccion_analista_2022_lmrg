theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(174376)
m1 <- rexp(n = 56, rate = 4.1); 1/4.1 # media real de la población
tail(as.data.frame(m1))
m2 <- rexp(n = 63, rate = 3.4); 1/3.4 # media real de la población
tail(as.data.frame(m2))
plot(m1)
plot(m2)
boxplot(m1)
boxplot(m2)
hit(m1)
hist(m1)
hist(m2)
ipi <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
spec()
precipi <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi <- read.csv(f1, sep= ',')("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv", sep =',')
precipi <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv", sep =',')
library(readxl)
evapotras <- read_excel("Desktop/evapotras.csv")
View(evapotras)
precipi <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi_mensual <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi_mensual <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
tempminmen <- read.csv("~/Desktop/tempminmen.csv", header=FALSE, comment.char="#")
View(tempminmen)
precipi_mensual <- tempminmen
summary(precipi_mensual)
precipi_mensual <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi_mensual <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi_mensual <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
View(precipi_mensual)
spec()
name(storms)
names()
precipi_mensual <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi_mensual <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
precipi_mensual <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
View(precipi_mensual)
View(precipi_mensual)
summary(precipi_mensual)
plot(precipi_mensual)
mean.Date(precipi_mensual)
ene <- mean(precipi_mensual$ENE)
temperaturamin <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
ene <- mean(precipi_mensual$FEB)
ene <- mean(precipi_mensual$ENE)
temperaturamin <- read.csv("/Users/lizethreyes/Desktop/tempminmen.csv")
summary(precipi_mensual)
summary(temperaturamin)
media_mensual <- c(mean(temperaturamin$ENE),mean(temperaturamin$FEB),mean(temperaturamin$MAR,mean(temperaturamin$ABR),
mean(temperaturamin$MAY), mean(temperaturamin$JUN),mean(temperaturamin$JUL), mean(temperaturamin$AGO), mean(temperaturamin$SEP),
mean(temperaturamin$OCT), mean(temperaturamin$NOV), mean(temperaturamin$DIC))
plot(media_mensual)
c
media_mensual <- c (mean(temperaturamin$ENE),mean(temperaturamin$FEB),mean(temperaturamin$MAR,mean(temperaturamin$ABR),
mean(temperaturamin$MAY), mean(temperaturamin$JUN),mean(temperaturamin$JUL), mean(temperaturamin$AGO), mean(temperaturamin$SEP),
mean(temperaturamin$OCT), mean(temperaturamin$NOV), mean(temperaturamin$DIC))
media_mensual <- c(mean(temperaturamin$ENE),mean(temperaturamin$FEB),mean(temperaturamin$MAR,mean(temperaturamin$ABR),
mean(temperaturamin$MAY), mean(temperaturamin$JUN),mean(temperaturamin$JUL), mean(temperaturamin$AGO), mean(temperaturamin$SEP),
mean(temperaturamin$OCT), mean(temperaturamin$NOV), mean(temperaturamin$DIC))
mean(ENE)
media_mensual <- c(mean(temperaturamin$ENE),mean(temperaturamin$FEB),mean(temperaturamin$MAR),mean(temperaturamin$ABR),
mean(temperaturamin$MAY), mean(temperaturamin$JUN),mean(temperaturamin$JUL), mean(temperaturamin$AGO), mean(temperaturamin$SEP),
mean(temperaturamin$OCT), mean(temperaturamin$NOV), mean(temperaturamin$DIC))
plot(media_mensual)
library(ggplot2)
ggplot(temperaturamin, aes(x, media_mensual)) + geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") + coord_cartesian() + scale_color_gradient() +
theme_bw()
ggplot(temperaturamin, aes(temperaturamin$X, media_mensual)) + geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") + coord_cartesian() + scale_color_gradient() +
theme_bw()
ggplot(temperaturamin, aes(temperaturamin$X, media_mensual)) + geom_point(aes(color = blues9)) +
geom_smooth(method ="lm") + coord_cartesian() + scale_color_gradient() +
theme_bw()
ggplot(temperaturamin, aes(X, media_mensual)) + geom_point(aes(color = blues9)) +
geom_smooth(method ="lm") + coord_cartesian() + scale_color_gradient() +
theme_bw()
ggplot(temperaturamin, aes(X, media_mensual)) + geom_point(aes(col=blues9)) +
geom_smooth(method ="lm") + coord_cartesian() + scale_color_gradient() +
theme_bw()
plot (media_mensual)
plot (media_mensual, X)
plot (X, media_mensual, xlabel= "Año", ylabel="Temperatura")
View(temperaturamin)
plot (temperaturamin$X, media_mensual, xlabel= "Año", ylabel="Temperatura")
plot.default(media_mensual)
plot.default(media_mensual, main ="Resumen de temperatura media anual durante el periodo 1963-2019", xlabel="MESES", ylabel="Temperatura (ºC)")
plot (media_mensual, main ="Resumen de temperatura media anual durante el periodo 1963-2019", xlabel="MESES", ylabel="Temperatura (ºC)")
plot (X, media_mensual, main ="Resumen de temperatura media anual durante el periodo 1963-2019", xlabel="MESES", ylabel="Temperatura (ºC)")
grid ()
plot ( media_mensual, main ="Resumen de temperatura media anual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)")
plot ( media_mensual, main ="Resumen de temperatura media anual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col=blues9)
plot ( media_mensual, main ="Resumen de temperatura media anual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue
grid ()
plot ( media_mensual, main ="Resumen de temperatura media anual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
plot ( media_mensual, main ="Resumen de temperatura media anual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot ( media_mensual, main ="Resumen de temperatura máxima media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot ( media_mensual, main ="Resumen de temperatura máxima media mensual,"", durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
plot ( media_mensual, main ="Resumen de temperatura máxima media mensual,"", durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot ( media_mensual, main ="Resumen de temperatura mínima media mensual,"", durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot ( media_mensual, type= "l", main ="Resumen de temperatura mínima media mensual,"", durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot ( media_mensual, type= line , main ="Resumen de temperatura mínima media mensual,"", durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
plot ( media_mensual, main ="Resumen de temperatura mínima media mensual,"", durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot ( media_mensual, main ="Resumen de temperatura mínima media mensual,"", durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot( media_mensual, main ="Resumen de temperatura mínima media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
temperaturamin <- read.csv("/Users/lizethreyes/Desktop/temmaxmensual.csv")
summary(temperaturamin)
media_mensual <- c(mean(temperaturamin$ENE),mean(temperaturamin$FEB),mean(temperaturamin$MAR),mean(temperaturamin$ABR),
mean(temperaturamin$MAY), mean(temperaturamin$JUN),mean(temperaturamin$JUL), mean(temperaturamin$AGO), mean(temperaturamin$SEP),
mean(temperaturamin$OCT), mean(temperaturamin$NOV), mean(temperaturamin$DIC))
temperaturamin <- read.csv("/Users/lizethreyes/Desktop/temmaxmensual.csv")
plot( media_mensual, main ="Resumen de temperatura mínima media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot( media_mensual, main ="Resumen de temperatura máxima media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
temperaturamin <- read.csv("/Users/lizethreyes/Desktop/evapotras.csv")
summary(temperaturamin)
media_mensual <- c(mean(temperaturamin$ENE),mean(temperaturamin$FEB),mean(temperaturamin$MAR),mean(temperaturamin$ABR),
mean(temperaturamin$MAY), mean(temperaturamin$JUN),mean(temperaturamin$JUL), mean(temperaturamin$AGO), mean(temperaturamin$SEP),
mean(temperaturamin$OCT), mean(temperaturamin$NOV), mean(temperaturamin$DIC))
plot( media_mensual, main ="Resumen de temperatura máxima media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot( media_mensual, main ="Resumen de evapotranspiración media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Temperatura (ºC)", col="blue")
grid()
plot( media_mensual, main ="Resumen de evapotranspiración media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Evapotrasnpiración (MM)", col="blue")
grid()
temperaturamin <- read.csv("/Users/lizethreyes/Desktop/precipitacion.csv")
summary(temperaturamin)
media_mensual <- c(mean(temperaturamin$ENE),mean(temperaturamin$FEB),mean(temperaturamin$MAR),mean(temperaturamin$ABR),
mean(temperaturamin$MAY), mean(temperaturamin$JUN),mean(temperaturamin$JUL), mean(temperaturamin$AGO), mean(temperaturamin$SEP),
mean(temperaturamin$OCT), mean(temperaturamin$NOV), mean(temperaturamin$DIC))
plot( media_mensual, main ="Resumen de evapotranspiración media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Evapotrasnpiración (MM)", col="blue")
grid()
temperaturamin <- read.csv("/Users/lizethreyes/Desktop/precipitacion.csv")
summary(temperaturamin)
media_mensual <- c(mean(temperaturamin$ENE),mean(temperaturamin$FEB),mean(temperaturamin$MAR),mean(temperaturamin$ABR),
mean(temperaturamin$MAY), mean(temperaturamin$JUN),mean(temperaturamin$JUL), mean(temperaturamin$AGO), mean(temperaturamin$SEP),
mean(temperaturamin$OCT), mean(temperaturamin$NOV), mean(temperaturamin$DIC))
plot( media_mensual, main ="Resumen de evapotranspiración media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Evapotrasnpiración (MM)", col="blue")
grid()
plot( media_mensual, main ="Resumen de precipitación media mensual durante el periodo 1963-2019", xlab="MESES", ylab="Precipitación (MM)", col="blue")
grid()
nyc <- read.csv ("nyc.csv", header=TRUE)
nyc <- read.csv ("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Ejemplo-01/nyc.csv", header=TRUE)
nyc <- read.csv("nyc.csv", header = TRUE)
tail(nyc, 2)
dim(nyc)
attach(nyc)
pairs(~ Price + Food + Decor + Service, data = nyc, gap = 0.4, cex.labels = 1.5)
m1 <- lm(Price ~ Food + Decor + Service + East)
pairs(~ Price + Food + Decor + Service, data = nyc, gap = 0.4, cex.labels = 1.5)
summary(m1)
m2 <- lm(Price ~ Food + Decor + East)
summary(m2)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East)
summary(mfull)
anova(m2,mfull)
summary(m2)
plot(m2$fitted.values, Price, xlab = "Valores ajustados", ylab = "Price")
abline(lsfit(m2$fitted.values, Price))
pairs(~ Food + Decor, data = nyc, gap = 0.4, cex.labels = 1.5)
StanRes2 <- rstandard(m2)
par(mfrow = c(2, 2))
plot(Food, StanRes2, ylab = "Residuales Estandarizados")
plot(Decor, StanRes2, ylab = "Residuales Estandarizados")
plot(East, StanRes2, ylab = "Residuales Estandarizados")
qqnorm(StanRes2)
qqline(StanRes2)
dev.off()
StanRes2 <- rstandard(m2)
par(mfrow = c(2, 2))
plot(Food, StanRes2, ylab = "Residuales Estandarizados")
plot(Decor, StanRes2, ylab = "Residuales Estandarizados")
plot(East, StanRes2, ylab = "Residuales Estandarizados")
qqnorm(StanRes2)
qqline(StanRes2)
hist(StanRes2)
shapiro.test(StanRes2)
adversiting <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-01/advertising.csv")
tail(adversiting, 2)
dim(adversiting)
attach(adversiting)
tail(adversiting, 2)
pairs(~ Sales + TV + Radio + Newspaper, data = adversiting, gap = 0.4, cex.labels = 1.5)
pairs(~ Sales + TV + Radio + Newspaper, data = adversiting, gap = 0.4, cex.labels = 1.5)
m1 <- lm(Sales~TV + Radio + Newspaper )
summary()
m1 <- lm(Sales~TV + Radio + Newspaper)
summary(m1)
m2 <- lm(Sales~TV + Radio)
summary(m2)
anova(m1,m2)
abline(lsfit(m2$fittedvalues, Sales))
plot(m2$fitted.values, Sales, xlab="Valores ajustados", ylab="Sales")
abline(lsfit(m2$fittedvalues, Sales))
plot(m2$fitted.values, Sales, xlab="Valores ajustados", ylab="Sales")
abline(lsfit(m2$fittedvalues, Sales))
pairs
attach(adversiting)
plot(m2$fitted.values, Sales, xlab="Valores ajustados", ylab="Sales")
abline(lsfit(m2$fittedvalues, Sales))
anova(m1,m2)
pairs(~ Sales + TV + Radio + Newspaper, data = adversiting, gap = 0.4, cex.labels = 1.5)
adv <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-01/advertising.csv")
tail(adv, 2)
dim(adv)
attach(adv)
pairs(~ Sales + TV + Radio + Newspaper, data = adv, gap = 0.4, cex.labels = 1.5)
m1 <- lm(Sales ~ TV + Radio + Newspaper)
summary(m1)
summary(m2)
m2 <- update(m1, ~.-Newspaper)
summary(m2)
plot(m2$fitted.values, Sales, xlab = "Valores ajustados", ylab = "Sales")
abline(lsfit(m2$fitted.values, Sales))
pairs(~ TV + Radio, data = adv, gap = 0.4, cex.labels = 1.5)
attach(adv)
adv <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-01/advertising.csv")
tail(adv, 2)
dim(adv)
attach(adv)
pairs(~ Sales + TV + Radio + Newspaper, data = adv, gap = 0.4, cex.labels = 1.5)
m1 <- lm(Sales ~ TV + Radio + Newspaper)
summary(m1)
m2 <- lm(Sales ~ TV + Radio)
summary(m2)
m2 <- update(m1, ~.-Newspaper)
summary(m2)
plot(m2$fitted.values, Sales, xlab = "Valores ajustados", ylab = "Sales")
abline(lsfit(m2$fitted.values, Sales))
pairs(~ TV + Radio, data = adv, gap = 0.4, cex.labels = 1.5)
StanRes2 <- rstandard(m2)
par(mfrow = c(2, 2))
plot(TV, StanRes2, ylab = "Residuales Estandarizados")
plot(Radio, StanRes2, ylab = "Residuales Estandarizados")
qqnorm(StanRes2)
qqline(StanRes2)
dev.off()
shapiro.test(StanRes2)
mfull <- lm(Sales ~ TV + Radio +
TV:Radio)
summary(mfull)
anova(m2,mfull)
plot(mfull$fitted.values, Sales, xlab = "Valores ajustados", ylab = "Sales")
abline(lsfit(mfull$fitted.values, Sales))
pairs(~ TV + Radio, data = adv, gap = 0.4, cex.labels = 1.5)
pairs(~ TV + Radio, data = adv, gap = 0.4, cex.labels = 1.5)
StanRes <- rstandard(mfull)
par(mfrow = c(2, 2))
plot(TV, StanRes, ylab = "Residuales Estandarizados")
plot(Radio, StanRes, ylab = "Residuales Estandarizados")
StanRes <- rstandard(mfull)
par(mfrow = c(2, 2))
plot(TV, StanRes, ylab = "Residuales Estandarizados")
plot(Radio, StanRes, ylab = "Residuales Estandarizados")
qqnorm(StanRes)
qqline(StanRes)
dev.off()
shapiro.test(StanRes)
qqnorm(StanRes)
qqline(StanRes)
install.packages(ISR)
install.packages(ISLR)
install.packages("ISLR")
install.packages("e1071")
installed.packages("dplyr")
library(dplyr)
library(e1071)
library(ggplot2)
library(ISLR)
?Default
head(Default)
tail(Default)
dim(Default)
str(Default)
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
set.seed(2020)
train = sample(nrow(Default),
round(nrow(Default)/2))
tail(Default[train, ])
tail(Default[train, ])
ggplot(Default[train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_dark() + ggtitle("Conjunto de entrenamiento")
ggplot(Default[-train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_light() + ggtitle("Conjunto de prueba")
t <- proc.time() # Inicia el cronómetro
tune.rad = tune(svm, default~., data = Default[train,],
kernel = "radial",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000),
gamma = seq(0.01, 10, 0.5)
)
)
proc.time()-t
library(dplyr)
library(e1071)
library(ggplot2)
library(ISLR)
library(dplyr)
library(e1071)
library(ggplot2)
library(ISLR)
clases <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-02/datosclases.csv")
library(readr)
datosclases <- read_csv("Data/datosclases.csv")
View(datosclases)
clases <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-02/datosclases.csv")
clases <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-02/datosclases.csv")
head(clases)
trail(clases)
train(clases)
tail(clases)
datos <- read.csv("datosclases.csv")
datos <- read.csv("datosclases.csv")
tail(datos); dim(datos); str(datos)
datos <- mutate(datos, y = factor(y))
datos <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-02/datosclases.csv")
tail(datos); dim(datos); str(datos)
datos <- mutate(datos, y = factor(y))
ggplot(datos, aes(x = x.1, y = x.2, colour = y)) +
geom_point() +
theme_dark() + ggtitle("Datos")
train <- sample(300, 150)
tail(as.data.frame(train))
set.seed(67)
tune.out <- tune(svm, y~., data = datos[train, ],
kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)))
summary(tune.out)
table(true = datos[-train, "y"],
pred = predict(tune.out$best.model, newdata = datos[-train,]))
summary(tune.rad)
summary(tune.out)
$tune-out
?tune-out
?tune.out
tail(datos); dim(datos); str(datos)
datos <- mutate(datos, y = factor(y))
ggplot(datos, aes(x = x.1, y = x.2, colour = y)) +
geom_point() +
theme_dark() + ggtitle("Datos")
train <- sample(300, 150)
tail(as.data.frame(train))
set.seed(67)
tune.out <- tune(svm, y~., data = datos[train, ],
kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)))
summary(tune.out)
set.seed(67)
tune.out <- tune(svm, y~., data = datos[train, ],
kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)))
summary(tune.out)
table(true = datos[-train, "y"],
pred = predict(tune.out$best.model, newdata = datos[-train,]))
tail(clases); dim(clases); str(clases)
datos <- mutate(clases, y = factor(y))
ggplot(clases, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
ggplot(clases, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('y') +
theme_grey() + ggtitle("clases")
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
ggplot(clases, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('y') +
theme_grey() + ggtitle("clases")
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
ggplot(clases, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('y') +
theme_grey() + ggtitle("clases")
tail(clases); dim(clases); str(clases)
datos <- mutate(clases, y = factor(y))
ggplot(clases, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('y') +
theme_grey() + ggtitle("clases")
set.seed(2020)
train = sample(nrow(clases),
round(nrow(clases)/2))
tail(clases[train, ])
set.seed(2020)
train = sample(nrow(clases),
round(nrow(clases)/2))
tail(clases[train, ])
ggplot(clases[train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('y') +
theme_dark() + ggtitle("Conjunto de entrenamiento")
library(dplyr)
library(e1071)
library(ggplot2)
library(ISLR)
ggplot(clases, aes(x = balance, y = income, colour = blues9)) +
geom_point() + facet_wrap('y') +
theme_grey() + ggtitle("clases")
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-02/datosclases.csv")
clases <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-02/datosclases.csv")
library(dplyr)
library(e1071)
library(ggplot2)
library(ISLR)
?Default
head(Default)
tail(Default)
dim(Default)
str(Default)
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
clases <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2021/main/Sesion-05/Reto-02/datosclases.csv")
AP <- AirPassengers
AP
class(AP)
start(AP); end(AP); frequency(AP)
summary(AP)
plot(AP, ylab = "Pasajeros (1000's)", xlab = "Tiempo",
main = "Reserva de pasajeros aéreos internacionales",
sub = "Estados Unidos en el periodo 1949-1960")
plot(AP)
CBE <- read.csv("https://raw.githubusercontent.com/AtefOuni/ts/master/Data/cbe.dat", header = TRUE)
View(CBE)
spec(CBE)
spec_csv(CBE)
CBE <- read.table("https://raw.githubusercontent.com/AtefOuni/ts/master/Data/cbe.dat", header = TRUE)
CBE <- scan("https://raw.githubusercontent.com/AtefOuni/ts/master/Data/cbe.dat", header = TRUE)
CBE <- read("https://raw.githubusercontent.com/AtefOuni/ts/master/Data/cbe.dat", header = TRUE)
CBE <- read.csv2("https://raw.githubusercontent.com/AtefOuni/ts/master/Data/cbe.dat", header = TRUE)
getwd <-
train_bp <- read.csv(train.csv)
getwd()
setwd(/Users/lizethreyes/Desktop/Proyecto/)
setwd(/Users/lizethreyes/Desktop/Proyecto)
setwd(Users/lizethreyes/Desktop/Proyecto)
setwd(/Users/lizethreyes/Desktop/Proyecto)
train_bp <- read.csv(train.csv)
setwd("/Users/lizethreyes/Desktop/Proyecto/seleccion_analista_2022_lmrg")
library(ggplot2)
setwd("/Users/lizethreyes/Desktop/Proyecto/seleccion_analista_2022_lmrg")
train_bp <- read.csv(train.csv)
getwd()
setwd("/Users/lizethreyes/Desktop/Proyecto/seleccion_analista_2022_lmrg/pollos_petrel")
train_bp <- read.csv(train.csv)
train_bp <- read.csv("train.csv")
getwd()
library(ggplot2)
setwd("/Users/lizethreyes/Desktop/Proyecto/seleccion_analista_2022_lmrg/pollos_petrel")
train_bp <- read.csv("train.csv")
getwd()
View(train_bp)
summary.data.frame("train_bp")
boxplot(Masa, col = "Masa")
boxplot(train_bp, col = "Masa")
ggplot(train_bp, aes(x=longitud_tarso, y=masa, colour=mgp)) + geom_point()
install.packages("ggplot2")
library(ggplot2)
#Crea un resumen
ggplot(train_bp, aes(x=longitud_tarso, y=masa, colour=mgp)) + geom_point()
#Crea un resumen
ggplot(train_bp, aes(x=Longitud_tarso, y=masa, colour=mgp)) + geom_point()
ggplot(train_bp, aes(x=Longitud_tarso, y=Masa, colour=mgp)) + geom_point()
#Crea un resumen
ggplot(train_bp, aes(x=Longitud_tarso, y=Masa, colour="mgp")) + geom_point()
#Crea un resumen
ggplot(train_bp, aes(x=Longitud_tarso, y=Masa)) + geom_point()
#Crea un histograma de longitud de tarso
hist(train_bp$Longitud_tarso)
#Crea un histograma de longitud de tarso
hist(train_bp$Longitud_tarso, "Longitud de tarso")
#Crea un histograma de longitud de tarso
hist(train_bp$Longitud_tarso, main = "Longitud de tarso", xlabel= Longitud tarso, ylabel=Frecuencia)
#Crea un histograma de longitud de tarso
hist(train_bp$Longitud_tarso, main = "Longitud de tarso", xlab= "Longitud tarso", ylab="Frecuencia")
setwd("/Users/lizethreyes/Desktop/Proyecto/seleccion_analista_2022_lmrg/pollos_petrel")
train_bp <- read.csv("train.csv")
summary.data.frame("train_bp")
#Crea un histograma de longitud de tarso
hist(train_bp$Longitud_tarso, main = "Longitud de tarso", xlab= "Longitud tarso", ylab="Frecuencia")
setwd("/Users/lizethreyes/Desktop/Proyecto/seleccion_analista_2022_lmrg/pollos_petrel")
train_bp <- read.csv("train.csv")
#Crea un histograma de longitud de tarso
hist(train_bp$Longitud_tarso, main = "Longitud de tarso", xlab= "Longitud tarso", ylab="Frecuencia")
View(train_bp)
install.packages("styler")
